diff --git a/nixos/modules/module-list.nix b/nixos/modules/module-list.nix
index eee115c..76c200f 100644
--- a/nixos/modules/module-list.nix
+++ b/nixos/modules/module-list.nix
@@ -495,6 +495,7 @@
   ./services/web-servers/nginx/default.nix
   ./services/web-servers/php53-fpm.nix
   ./services/web-servers/phpfpm/default.nix
+  ./services/web-servers/phpfpm/runit.nix
   ./services/web-servers/shellinabox.nix
   ./services/web-servers/tomcat.nix
   ./services/web-servers/uwsgi.nix
diff --git a/nixos/modules/services/web-servers/phpfpm/runit.nix b/nixos/modules/services/web-servers/phpfpm/runit.nix
new file mode 100644
index 0000000..3222c09
--- /dev/null
+++ b/nixos/modules/services/web-servers/phpfpm/runit.nix
@@ -0,0 +1,147 @@
+{ config, lib, pkgs, ... }:
+
+with lib;
+
+let
+
+  cfg = config.runit.phpfpm;
+
+  stateDir = key: "/run/phpfpm-${key}";
+
+  pidFile = key: "${stateDir key}/phpfpm.pid";
+
+  mkPool = n: p: ''
+    [${n}]
+    listen = ${p.listen}
+    ${p.extraConfig}
+  '';
+
+  cfgFile = key: c: pkgs.writeText "phpfpm.conf" ''
+    [global]
+    pid = ${pidFile key}
+    error_log = /dev/stderr
+    ${c.extraConfig}
+
+    ${concatStringsSep "\n" (mapAttrsToList mkPool c.pools)}
+
+    ${concatStringsSep "\n" (mapAttrsToList (n: v: "[${n}]\n${v}") c.poolConfigs)}
+  '';
+
+  phpIni = c: pkgs.writeText "php.ini" ''
+    ${readFile "${c.phpPackage}/etc/php-recommended.ini"}
+
+    ${c.phpOptions}
+  '';
+
+in {
+
+  options = {
+    runit.phpfpm = {
+
+      enable = mkOption {
+        default = false;
+        description = "Whether to enable phpfpm services.";
+      };
+      
+      fpms = mkOption {
+        type = types.attrsOf (types.submodule {
+          options = {
+            extraConfig = mkOption {
+              type = types.lines;
+              default = "";
+              description = ''
+                Extra configuration that should be put in the global section of
+                the PHP FPM configuration file. Do not specify the options
+                <literal>pid</literal>, <literal>error_log</literal> or
+                <literal>daemonize</literal> here, since they are generated by
+                NixOS.
+              '';
+            };
+
+            phpPackage = mkOption {
+              type = types.package;
+              default = pkgs.php;
+              defaultText = "pkgs.php";
+              description = ''
+                The PHP package to use for running the FPM service.
+              '';
+            };
+
+            phpOptions = mkOption {
+              type = types.lines;
+              default = "";
+              example =
+                ''
+                  date.timezone = "CET"
+                '';
+              description =
+                "Options appended to the PHP configuration file <filename>php.ini</filename>.";
+            };
+
+            poolConfigs = mkOption {
+              default = {};
+              type = types.attrsOf types.lines;
+              example = literalExample ''
+                { mypool = '''
+                    listen = /run/phpfpm/mypool
+                    user = nobody
+                    pm = dynamic
+                    pm.max_children = 75
+                    pm.start_servers = 10
+                    pm.min_spare_servers = 5
+                    pm.max_spare_servers = 20
+                    pm.max_requests = 500
+                  ''';
+                }
+              '';
+              description = ''
+                A mapping between PHP FPM pool names and their configurations.
+                See the documentation on <literal>php-fpm.conf</literal> for
+                details on configuration directives. If no pools are defined,
+                the phpfpm service is disabled.
+              '';
+            };
+
+            pools = mkOption {
+              type = types.attrsOf (types.submodule (import ./pool-options.nix {
+                inherit lib;
+              }));
+              default = {};
+              description = ''
+                If no pools are defined, the phpfpm service is disabled.
+              '';
+            };
+
+            log = mkOption {
+              default = {};
+              description = "Logging configuration (as per runit log service)";
+            };
+
+          };
+        });
+
+        default = {};
+        description = "FPM managers";
+
+      };
+    };
+  };
+
+  config = mkIf cfg.enable {
+    runit.services = mapAttrs' (key: c: nameValuePair ("phpfpm-${key}") ({
+      stdErrToOut = true;
+
+      preRun = ''
+        mkdir -p "${stateDir key}"
+      '';
+
+      cmd = "${c.phpPackage}/bin/php-fpm -F -y ${cfgFile key c} -c ${phpIni c}";
+
+      log = c.log;
+
+    })) cfg.fpms;
+
+  };
+}
+
+# vim: et ts=2 sw=2
