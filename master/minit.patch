minit-0.10: a small yet feature-complete init


Header from folded patch 'minit-module.patch':

minit module/service unit


Header from folded patch 'minit-path.patch':

minit: fix PATH

diff --git a/nixos/modules/module-list.nix b/nixos/modules/module-list.nix
index 7cc6f9c..adcae5b 100644
--- a/nixos/modules/module-list.nix
+++ b/nixos/modules/module-list.nix
@@ -413,6 +413,7 @@
   ./services/system/cloud-init.nix
   ./services/system/dbus.nix
   ./services/system/kerberos.nix
+  ./services/system/minit.nix
   ./services/system/nscd.nix
   ./services/system/uptimed.nix
   ./services/torrent/deluge.nix
diff --git a/nixos/modules/services/system/minit.nix b/nixos/modules/services/system/minit.nix
new file mode 100644
index 0000000..44a133d
--- /dev/null
+++ b/nixos/modules/services/system/minit.nix
@@ -0,0 +1,64 @@
+{ config, pkgs, lib, ... }:
+
+with lib;
+
+let
+
+  cfg = config.services.minit;
+
+in
+
+{
+
+  ###### interface
+
+  options = {
+
+    services.minit = {
+
+      enable = mkOption {
+        default = false;
+        description = "Whether to enable minit service.";
+      };
+
+    };
+
+  };
+
+
+  ###### implementation
+
+  config = mkIf config.services.minit.enable {
+
+    environment.systemPackages = [ pkgs.minit ];
+
+    systemd.services.minit =
+      { description = "Minit service";
+
+        path = [
+          "/run/current-system/sw"
+        ];
+
+        wantedBy = [ "multi-user.target" ];
+        after = [ "network.target" ];
+
+        preStart =
+          ''
+            dir=/etc/minit
+            mkdir -p $dir
+            for i in 'in' 'out'; do
+              [ -p $dir/$i ] || mkfifo -m 600 $dir/$i
+            done
+          '';
+
+        serviceConfig = {
+          Type = "simple";
+          ExecStart = "${pkgs.minit}/sbin/minit";
+        };
+      };
+
+  };
+
+}
+
+# vim: et ts=2 sw=2
diff --git a/pkgs/os-specific/linux/minit/default.nix b/pkgs/os-specific/linux/minit/default.nix
new file mode 100644
index 0000000..dcb75ee
--- /dev/null
+++ b/pkgs/os-specific/linux/minit/default.nix
@@ -0,0 +1,50 @@
+{ stdenv, fetchurl, dietlibc, libowfat }:
+
+let
+  pkg = "minit";
+  ver = "0.10";
+  homepage = http://www.fefe.de/minit;
+in stdenv.mkDerivation rec {
+  name = "${pkg}-${ver}";
+
+  srcs = [
+    (fetchurl {
+      url = "http://dl.fefe.de/${name}.tar.bz2";
+      sha256 = "1kgsvn173i84zbyw108cvnn90xkf6s4y83xiwvbjh66s89ir4xp9";
+    })
+    (fetchurl {
+      url = http://icculus.org/~boris/data/minit-scripts.tar.bz2;
+      sha256 = "1krfkkmd9dxk2cxdr5drbp0b3jabzp9jambzlayd4888dv7x7v1q";
+    })
+  ];
+
+  sourceRoot = name;
+
+  buildInputs = [dietlibc libowfat];
+
+  installPhase = ''
+    make install-files DESTDIR=$out
+    install -m 700 killall5 $out/sbin/killall5.minit
+    mv $out/sbin/shutdown $out/sbin/shutdown.minit
+    rm $out/sbin/init
+    mkdir $out/share
+    mv $NIX_BUILD_TOP/${pkg}-scripts $out/share
+  '';
+
+  allowedReferences = ["out"];
+  dontStrip = true; # diet does not need stripping
+  dontPatchELF = true; # we produce static binaries
+  dontPatchShebangs = true; # example scripts don't need it
+
+  meta = {
+    description = "a small yet feature-complete init";
+    homepage = homepage;
+    license = stdenv.lib.licenses.gpl2;
+    platforms = stdenv.lib.platforms.linux;
+    maintainers = with stdenv.lib.maintainers; [ tzeman ];
+  };
+
+}
+
+# vim: et ts=2 sw=2 
+
diff --git a/pkgs/top-level/all-packages.nix b/pkgs/top-level/all-packages.nix
index 9634cdf..8faec9a 100644
--- a/pkgs/top-level/all-packages.nix
+++ b/pkgs/top-level/all-packages.nix
@@ -10809,6 +10809,8 @@ let
 
   mingetty = callPackage ../os-specific/linux/mingetty { };
 
+  minit = callPackage ../os-specific/linux/minit { };
+
   miraclecast = callPackage ../os-specific/linux/miraclecast {
     systemd = systemd.override { enableKDbus = true; };
   };
